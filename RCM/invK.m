function qd = invK(T07,d,a,psi,se)
% qd is the vector of the generated angles (in degs) generated by the
% inverse kinematics process


thetav = zeros(7,1);theta = thetav;

%Calculation of the vector p
p = T07(1:3,4) - [0 0 d(1)]' - T07(1:3,1:3)*[0 0 d(7)]';
thetav(3) = 0;
% thetav 4 vitual
c4 = (p(1)^2+p(2)^2+p(3)^2-d(3)^2-d(5)^2)/(2*d(3)*d(5));
s41 = real(sqrt(1-c4^2));
s42 = -s41;
thetav4(1) = atan2(s41,c4);
thetav4(2) = atan2(s42,c4);
% thetav 2 virtual
theta2v(1) = atan2((d(3)+d(5)*c4)*p(3)-d(5)*s41*sqrt(p(1)^2+p(2)^2),(d(3)+d(5)*c4)*sqrt(p(1)^2+p(2)^2)+d(5)*s41*p(3)) - pi/2;
theta2v(2) = atan2((d(3)+d(5)*c4)*p(3)+d(5)*s41*sqrt(p(1)^2+p(2)^2),-(d(3)+d(5)*c4)*sqrt(p(1)^2+p(2)^2)+d(5)*s41*p(3)) - pi/2;
theta2v(3) = atan2((d(3)+d(5)*c4)*p(3)-d(5)*s42*sqrt(p(1)^2+p(2)^2),(d(3)+d(5)*c4)*sqrt(p(1)^2+p(2)^2)+d(5)*s42*p(3)) - pi/2;
theta2v(4) = atan2((d(3)+d(5)*c4)*p(3)+d(5)*s42*sqrt(p(1)^2+p(2)^2),-(d(3)+d(5)*c4)*sqrt(p(1)^2+p(2)^2)+d(5)*s42*p(3)) - pi/2;
% thetav 1 virtual 
theta1v(1) = atan2(p(2),p(1));
if p(2)>=0
    theta1v(2) = atan2(p(2),p(1)) - pi;
else
    theta1v(2) = atan2(p(2),p(1)) + pi;
end
%Based on se compute a set of solutions for the first 4 joints
if se==1
    thetav(1) = theta1v(1);
    thetav(2) = theta2v(1);
    thetav(4) = thetav4(1);
    s = 1;
elseif se==2
    thetav(1) = theta1v(1);
    thetav(2) = theta2v(1);
    thetav(4) = thetav4(1);
    s = -1;
elseif se==3
    thetav(1) = theta1v(1);
    thetav(2) = theta2v(3);
    thetav(4) = thetav4(2);
    s = 1;
elseif se==4
    thetav(1) = theta1v(1);
    thetav(2) = theta2v(3);
    thetav(4) = thetav4(2);
    s = -1;
elseif se==5
    thetav(1) = theta1v(2);
    thetav(2) = theta2v(2);
    thetav(4) = thetav4(1);
    s = 1;
elseif se==6
    thetav(1) = theta1v(2);
    thetav(2) = theta2v(2);
    thetav(4) = thetav4(1);
    s = -1;
elseif se==7
    thetav(1) = theta1v(2);
    thetav(2) = theta2v(4);
    thetav(4) = thetav4(2);
    s = 1;
elseif se==8
    thetav(1) = theta1v(2);
    thetav(2) = theta2v(4);
    thetav(4) = thetav4(2);
    s = -1;
end
%precision of round function
pr = 5;
q = thetav;
%Compute the T_0^4v
for i = 1:4
    temp      = [ round(cos(q(i)),pr)         -round(sin(q(i))*cos(a(i)),pr)   round(sin(q(i))*sin(a(i)),pr)    0;
                  round(sin(q(i)),pr)         round(cos(q(i))*cos(a(i)),pr)   -round(cos(q(i))*sin(a(i)),pr)    0;  
                  0                           round(sin(a(i)),pr)              round(cos(a(i)),pr)              d(i);
                  0                                     0                         0                             1;
        ];
   A(i)= {temp};
end 


T03v = A{1} * A{2} * A{3};
R03v = T03v(1:3,1:3);
%Implement Rodrigues formula
BW = p/norm(p);
BWs = [0 -BW(3) BW(2);BW(3) 0 -BW(1);-BW(2) BW(1) 0]; 
Ap = BWs*R03v;
Bp = -BWs^2*R03v;
Cp = BW*BW'*R03v;

%Calculation of the 4 first angles based on psi
theta(1) = atan2((Ap(2,2)*sin(psi) + Bp(2,2)*cos(psi) + Cp(2,2)),(Ap(1,2)*sin(psi) + Bp(1,2)*cos(psi) + Cp(1,2)));
theta(1) = theta(1) - sign(theta(1))*pi;
theta(2) = real(acos((Ap(3,2)*sin(psi) + Bp(3,2)*cos(psi) + Cp(3,2))));
theta(3) = atan2((Ap(3,3)*sin(psi) + Bp(3,3)*cos(psi) + Cp(3,3)),(Ap(3,1)*sin(psi) + Bp(3,1)*cos(psi) + Cp(3,1)));
theta(4) = thetav(4);

T34 = A{4};
R34 = T34(1:3,1:3);
Aw = R34'*Ap'*T07(1:3,1:3);
Bw = R34'*Bp'*T07(1:3,1:3);
Cw = R34'*Cp'*T07(1:3,1:3);
%Calculation of the wrist angles based on psi
theta(5) = atan2(s*(Aw(2,3)*sin(psi) + Bw(2,3)*cos(psi) + Cw(2,3)),s*(Aw(1,3)*sin(psi) + Bw(1,3)*cos(psi) + Cw(1,3)));
theta(5) = theta(5) - sign(theta(5))*pi;
theta(6) = real(s*acos((Aw(3,3)*sin(psi) + Bw(3,3)*cos(psi) + Cw(3,3))));
theta(7) = -atan2(s*(Aw(3,2)*sin(psi) + Bw(3,2)*cos(psi) + Cw(3,2)),s*(Aw(3,1)*sin(psi) + Bw(3,1)*cos(psi) + Cw(3,1)));
%Transform to degrees
qd = rad2deg(theta)';
end